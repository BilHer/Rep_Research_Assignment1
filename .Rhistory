>
> # Here we show the averages for max interval, 8:35, on each different day.
> interval.summary(active, "08:35")
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
active <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
active$date<-as.Date(active$date)
active$Weekday<-wday(active$date, label = TRUE, abbr = FALSE)
head(active)
make.sums.ggplot<- function(active.dataframe, RBrewers.colors = "Greens"){
active.sums <- active.dataframe %>%
group_by(date, Weekday) %>%
summarise(total_steps = sum(steps))
my.cols <- brewer.pal(7, RBrewers.colors)
my.cols[1] <- my.cols[7]
max.sum <- max(active.sums$total_steps, na.rm = TRUE)
ggplot(active.sums, aes(x = date, y = total_steps, fill = Weekday)) + geom_bar(stat = "identity") +
scale_x_date(breaks="1 day",
limits = as.Date(c('2012-10-03','2012-11-28'))) +
theme_wsj() +
theme(axis.text.x  = element_text(size=10,
angle=45,
colour="black",
vjust=1,
hjust=1)) +
scale_fill_manual(values = my.cols) +
geom_text(aes(x = date,
y = total_steps,
label = total_steps,
angle  = 90,
size = 5,
hjust = -0.1),
color = "brown",
show_guide  = F) +
coord_cartesian(ylim=c(0,max.sum*1.15)) +
geom_hline(aes ( yintercept = mean(total_steps, na.rm = TRUE)),
color = "chocolate3",
size = 1.5,
alpha = .50) +
geom_hline(aes ( yintercept = median(total_steps, na.rm = TRUE)),
color = "darkred",
alpha = .50) +
geom_text(aes(label = paste("Overall Mean =", round(mean(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'),
y = 20200),
color = "chocolate3",
size = 4) +
geom_text(aes(label = paste("Overall Median = ", round(median(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'),
y = 19700),
color = "darkred",
size = 4) +
ylab("Total Steps taken per day") +
xlab(NULL)
}
make.sums.ggplot(active, "Greens")
##
active$Interval <- as.POSIXct(strptime(sprintf("%04d", active$interval), "%H%M"))
make.max.interval.ggplot<- function(active.dataframe){
active.intervals <- active.dataframe %>%
group_by(Interval) %>%
summarise(Average = mean(steps, na.rm = TRUE)) %>%
arrange(Interval)
max.active <- active.intervals[which.max(active.intervals$Average),]
max.interval <<- max.active$Interval[1]
max.average <<- round(max.active$Average[1], 2)
ggplot(active.intervals, aes(x = Interval, y = Average)) +
geom_line() +
theme_economist() +
geom_text(aes(label = paste("Max Interval =", format(max.interval, "%H:%M")),
x = max.interval, y = max.average + 12), color = "black", size = 4) +
geom_text(aes(label = paste("Average Steps in the max interval =", max.average ),
x = max.interval, y = max.average + 4),color = "black", size = 4) +
theme(axis.text.x=element_text(angle=270, hjust=1, vjust=0.5, size = 10)) +
scale_x_datetime(breaks = date_breaks("30 mins"), labels = date_format("%H:%M"),
limits = c(active.intervals$Interval[12], active.intervals$Interval[286-10])) +
ylab("Average steps") +
xlab("5-minute Time Intervals (Labeled in chunks of 30-minutes)")
}
make.max.interval.ggplot(active)
#
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
active <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
active$date<-as.Date(active$date)
active$Weekday<-wday(active$date, label = TRUE, abbr = FALSE)
head(active)
"make.sums.ggplot <- function(active.dataframe, RBrewers.colors = "Greens"){
active.sums <- active.dataframe %>%
group_by(date, Weekday) %>%
summarise(total_steps = sum(steps))
my.cols <- brewer.pal(7, RBrewers.colors)
my.cols[1] <- my.cols[7]
max.sum <- max(active.sums$total_steps, na.rm = TRUE)
ggplot(active.sums, aes(x = date, y = total_steps, fill = Weekday)) + geom_bar(stat = "identity") +
scale_x_date(breaks="1 day", limits = as.Date(c('2012-10-03','2012-11-28'))) +
theme_wsj() +
theme(axis.text.x  = element_text(size=10, angle=45, colour="black", vjust=1, hjust=1)) +
scale_fill_manual(values = my.cols) +
geom_text(aes(x = date, y = total_steps, label = total_steps, angle  = 90, size = 5,                   hjust = -0.1),
color = "brown", show_guide  = F) +
coord_cartesian(ylim=c(0,max.sum*1.15)) +
geom_hline(aes ( yintercept = mean(total_steps, na.rm = TRUE)),
color = "chocolate3", size = 1.5, alpha = .50) +
geom_hline(aes ( yintercept = median(total_steps, na.rm = TRUE)),
color = "darkred", alpha = .50) +
geom_text(aes(label = paste("Overall Mean =", round(mean(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 20200), color = "chocolate3", size = 4) +
geom_text(aes(label = paste("Overall Median = ", round(median(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 19700), color = "darkred", size = 4) +
ylab("Total Steps taken per day") +
xlab(NULL)
}
make.sums.ggplot(active, "Greens")"
##
active$Interval <- as.POSIXct(strptime(sprintf("%04d", active$interval), "%H%M"))
make.max.interval.ggplot<- function(active.dataframe){
active.intervals <- active.dataframe %>%
group_by(Interval) %>%
summarise(Average = mean(steps, na.rm = TRUE)) %>%
arrange(Interval)
max.active <- active.intervals[which.max(active.intervals$Average),]
max.interval <<- max.active$Interval[1]
max.average <<- round(max.active$Average[1], 2)
ggplot(active.intervals, aes(x = Interval, y = Average)) +
geom_line() +
theme_economist() +
geom_text(aes(label = paste("Max Interval =", format(max.interval, "%H:%M")),
x = max.interval, y = max.average + 12), color = "black", size = 4) +
geom_text(aes(label = paste("Average Steps in the max interval =", max.average ),
x = max.interval, y = max.average + 4),color = "black", size = 4) +
theme(axis.text.x=element_text(angle=270, hjust=1, vjust=0.5, size = 10)) +
scale_x_datetime(breaks = date_breaks("30 mins"), labels = date_format("%H:%M"),
limits = c(active.intervals$Interval[12], active.intervals$Interval[286-10])) +
ylab("Average steps") +
xlab("5-minute Time Intervals (Labeled in chunks of 30-minutes)")
}
make.max.interval.ggplot(active)
#
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
active <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
active$date<-as.Date(active$date)
active$Weekday<-wday(active$date, label = TRUE, abbr = FALSE)
head(active)
make.sums.ggplot <- function(active.dataframe, RBrewers.colors = "Greens"){
active.sums <- active.dataframe %>%
group_by(date, Weekday) %>%
summarise(total_steps = sum(steps))
my.cols <- brewer.pal(7, RBrewers.colors)
my.cols[1] <- my.cols[7]
max.sum <- max(active.sums$total_steps, na.rm = TRUE)
ggplot(active.sums, aes(x = date, y = total_steps, fill = Weekday)) + geom_bar(stat = "identity") +
scale_x_date(breaks="1 day", limits = as.Date(c('2012-10-03','2012-11-28'))) +
theme_wsj() +
theme(axis.text.x  = element_text(size=10, angle=45, colour="black", vjust=1, hjust=1)) +
scale_fill_manual(values = my.cols) +
geom_text(aes(x = date, y = total_steps, label = total_steps, angle  = 90, size = 5,                   hjust = -0.1),
color = "brown", show_guide  = F) +
coord_cartesian(ylim=c(0,max.sum*1.15)) +
geom_hline(aes ( yintercept = mean(total_steps, na.rm = TRUE)),
color = "chocolate3", size = 1.5, alpha = .50) +
geom_hline(aes ( yintercept = median(total_steps, na.rm = TRUE)),
color = "darkred", alpha = .50) +
geom_text(aes(label = paste("Overall Mean =", round(mean(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 20200), color = "chocolate3", size = 4) +
geom_text(aes(label = paste("Overall Median = ", round(median(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 19700), color = "darkred", size = 4) +
ylab("Total Steps taken per day") +
xlab(NULL)
}
make.sums.ggplot(active, "Greens")
##
active$Interval <- as.POSIXct(strptime(sprintf("%04d", active$interval), "%H%M"))
make.max.interval.ggplot<- function(active.dataframe){
active.intervals <- active.dataframe %>%
group_by(Interval) %>%
summarise(Average = mean(steps, na.rm = TRUE)) %>%
arrange(Interval)
max.active <- active.intervals[which.max(active.intervals$Average),]
max.interval <<- max.active$Interval[1]
max.average <<- round(max.active$Average[1], 2)
ggplot(active.intervals, aes(x = Interval, y = Average)) +
geom_line() +
theme_economist() +
geom_text(aes(label = paste("Max Interval =", format(max.interval, "%H:%M")),
x = max.interval, y = max.average + 12), color = "black", size = 4) +
geom_text(aes(label = paste("Average Steps in the max interval =", max.average ),
x = max.interval, y = max.average + 4),color = "black", size = 4) +
theme(axis.text.x=element_text(angle=270, hjust=1, vjust=0.5, size = 10)) +
scale_x_datetime(breaks = date_breaks("30 mins"), labels = date_format("%H:%M"),
limits = c(active.intervals$Interval[12], active.intervals$Interval[286-10])) +
ylab("Average steps") +
xlab("5-minute Time Intervals (Labeled in chunks of 30-minutes)")
}
make.max.interval.ggplot(active)
#
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
active <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
active$date<-as.Date(active$date)
active$Weekday<-wday(active$date, label = TRUE, abbr = FALSE)
head(active)
make.sums.ggplot <- function(active.dataframe, RBrewers.colors = "Greens"){
active.sums <- active.dataframe %>%
group_by(date, Weekday) %>%
summarise(total_steps = sum(steps))
my.cols <- brewer.pal(7, RBrewers.colors)
my.cols[1] <- my.cols[7]
max.sum <- max(active.sums$total_steps, na.rm = TRUE)
ggplot(active.sums, aes(x = date, y = total_steps, fill = Weekday)) + geom_bar(stat = "identity") +
scale_x_date(breaks="1 day", limits = as.Date(c('2012-10-03','2012-11-28'))) +
theme_wsj() +
theme(axis.text.x  = element_text(size=10, angle=45, colour="black", vjust=1, hjust=1)) +
scale_fill_manual(values = my.cols) +
geom_text(aes(x = date, y = total_steps, label = total_steps, angle  = 90, size = 5,                   hjust = -0.1),
color = "brown", show_guide  = F) +
coord_cartesian(ylim=c(0,max.sum*1.15)) +
geom_hline(aes ( yintercept = mean(total_steps, na.rm = TRUE)),
color = "chocolate3", size = 1.5, alpha = .50) +
geom_hline(aes ( yintercept = median(total_steps, na.rm = TRUE)),
color = "darkred", alpha = .50) +
geom_text(aes(label = paste("Overall Mean =", round(mean(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 20200), color = "chocolate3", size = 4) +
geom_text(aes(label = paste("Overall Median = ", round(median(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 19700), color = "darkred", size = 4) +
ylab("Total Steps taken per day") +
xlab(NULL)
}
make.sums.ggplot(active, "Greens")
##
"active$Interval <- as.POSIXct(strptime(sprintf("%04d", active$interval), "%H%M"))
make.max.interval.ggplot<- function(active.dataframe){
active.intervals <- active.dataframe %>%
group_by(Interval) %>%
summarise(Average = mean(steps, na.rm = TRUE)) %>%
arrange(Interval)
max.active <- active.intervals[which.max(active.intervals$Average),]
max.interval <<- max.active$Interval[1]
max.average <<- round(max.active$Average[1], 2)
ggplot(active.intervals, aes(x = Interval, y = Average)) +
geom_line() +
theme_economist() +
geom_text(aes(label = paste("Max Interval =", format(max.interval, "%H:%M")),
x = max.interval, y = max.average + 12), color = "black", size = 4) +
geom_text(aes(label = paste("Average Steps in the max interval =", max.average ),
x = max.interval, y = max.average + 4),color = "black", size = 4) +
theme(axis.text.x=element_text(angle=270, hjust=1, vjust=0.5, size = 10)) +
scale_x_datetime(breaks = date_breaks("30 mins"), labels = date_format("%H:%M"),
limits = c(active.intervals$Interval[12], active.intervals$Interval[286-10])) +
ylab("Average steps") +
xlab("5-minute Time Intervals (Labeled in chunks of 30-minutes)")
}
make.max.interval.ggplot(active)"
#
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
require(ggplot2)
require(lubridate)
require(RColorBrewer)
require(dplyr)
require(ggthemes)
library(scales)
active <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
active$date<-as.Date(active$date)
active$Weekday<-wday(active$date, label = TRUE, abbr = FALSE)
head(active)
make.sums.ggplot <- function(active.dataframe, RBrewers.colors = "Greens"){
active.sums <- active.dataframe %>%
group_by(date, Weekday) %>%
summarise(total_steps = sum(steps))
my.cols <- brewer.pal(7, RBrewers.colors)
my.cols[1] <- my.cols[7]
max.sum <- max(active.sums$total_steps, na.rm = TRUE)
ggplot(active.sums, aes(x = date, y = total_steps, fill = Weekday)) + geom_bar(stat = "identity") +
scale_x_date(breaks="1 day", limits = as.Date(c('2012-10-03','2012-11-28'))) +
theme_wsj() +
theme(axis.text.x  = element_text(size=10, angle=45, colour="black", vjust=1, hjust=1)) +
scale_fill_manual(values = my.cols) +
geom_text(aes(x = date, y = total_steps, label = total_steps, angle  = 90, size = 5,                   hjust = -0.1),
color = "brown", show_guide  = F) +
coord_cartesian(ylim=c(0,max.sum*1.15)) +
geom_hline(aes ( yintercept = mean(total_steps, na.rm = TRUE)),
color = "chocolate3", size = 1.5, alpha = .50) +
geom_hline(aes ( yintercept = median(total_steps, na.rm = TRUE)),
color = "darkred", alpha = .50) +
geom_text(aes(label = paste("Overall Mean =", round(mean(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 20200), color = "chocolate3", size = 4) +
geom_text(aes(label = paste("Overall Median = ", round(median(total_steps, na.rm = TRUE), 2) ),
x = as.Date('2012-10-05'), y = 19700), color = "darkred", size = 4) +
ylab("Total Steps taken per day") +
xlab(NULL)
}
make.sums.ggplot(active, "Greens")
##
active$Interval <- as.POSIXct(strptime(sprintf("%04d", active$interval), "%H%M"))
make.max.interval.ggplot<- function(active.dataframe){
active.intervals <- active.dataframe %>%
group_by(Interval) %>%
summarise(Average = mean(steps, na.rm = TRUE)) %>%
arrange(Interval)
max.active <- active.intervals[which.max(active.intervals$Average),]
max.interval <<- max.active$Interval[1]
max.average <<- round(max.active$Average[1], 2)
ggplot(active.intervals, aes(x = Interval, y = Average)) +
geom_line() +
theme_economist() +
geom_text(aes(label = paste("Max Interval =", format(max.interval, "%H:%M")),
x = max.interval, y = max.average + 12), color = "black", size = 4) +
geom_text(aes(label = paste("Average Steps in the max interval =", max.average ),
x = max.interval, y = max.average + 4),color = "black", size = 4) +
theme(axis.text.x=element_text(angle=270, hjust=1, vjust=0.5, size = 10)) +
scale_x_datetime(breaks = date_breaks("30 mins"), labels = date_format("%H:%M"),
limits = c(active.intervals$Interval[12], active.intervals$Interval[286-10])) +
ylab("Average steps") +
xlab("5-minute Time Intervals (Labeled in chunks of 30-minutes)")
}
make.max.interval.ggplot(active)
#
summary(active)
NA.active <- subset(active, !complete.cases(active))
table(NA.active$date)
interval.summary <- function(active_frame, interval_string = "all"){
active_frame$temp_time <- format(active_frame$Interval, "%H:%M")
if (class(interval_string) != "character") {stop("Please enter an interval as a string.")}
if (!(interval_string %in% c( active_frame$temp_time, "all" ) ) ) {
stop("Please enter a 5 minute interval in the form of 00:00")}
output <- active_frame %>%
group_by(temp_time, Weekday) %>%
summarise(Average = mean(steps, na.rm = TRUE))
if (interval_string == "all") {
return(output)
} else {
output<- output %>%
filter(temp_time == interval_string)
return(output)
}
}
interval.summary(active, "08:35")
imputed <- active %>%
mutate(steps = as.numeric(steps)) %>%
group_by(Interval, Weekday) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
mutate(steps = round(steps, 2))
imputed <- active %>%
mutate(steps = as.numeric(steps)) %>%
group_by(Interval, Weekday) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
mutate(steps = round(steps, 2))
imputed.check<- function(original.df, imputed.df, check.interval, check.Weekday) {
print ("Original interval/day combination")
print (subset(original.df, original.df$interval == check.interval & Weekday == check.Weekday))
# Mean without the NAs for this interval/day combination is 225.8571
temp.mean <- mean(subset(original.df, original.df$interval == check.interval & Weekday == check.Weekday)$steps, na.rm = TRUE)
print ("")
print (paste("Mean for original dataset (with na.rm = TRUE) NAs is:", round(temp.mean, 2)))
print ("")
# This mean is filled into the NA slots, while the remaining values remain unchanged.
print ("Imputed interval/day combination")
print (subset(imputed.df, imputed.df$interval == check.interval & Weekday == check.Weekday))
}
make.sums.ggplot(imputed, "Blues")
imputed <- active %>%
mutate(Weekend = ifelse(Weekday %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
table(imputed$Weekend, imputed$Weekday)
